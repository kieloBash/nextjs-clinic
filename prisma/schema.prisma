datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: for Prisma Data Proxy
}

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

enum AppointmentStatus {
  PENDING // booked, awaiting confirmation
  CONFIRMED // confirmed by the doctor
  CANCELLED // cancelled by either party
  RESCHEDULED // was moved to a different time
  COMPLETED // appointment is done
}

enum InvoiceStatus {
  PENDING
  PAID
}

enum TimeSlotStatus {
  OPEN
  CLOSED
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  name           String
  image          String?
  phone          String?
  roleId         String
  hashedPassword String

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  role                  Role           @relation(fields: [roleId], references: [id])
  appointmentsAsPatient Appointment[]  @relation("PatientAppointments")
  appointmentsAsDoctor  Appointment[]  @relation("DoctorAppointments")
  notifications         Notification[]
  invoices              Invoice[]      @relation("InvoicePatient")
  createdInvoices       Invoice[]      @relation("InvoiceCreator")
  doctorTimeSlots       TimeSlot[]     @relation("DoctorTimeSlot")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // Added this field due to the To confirm your identity error 
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@id([provider, providerAccountId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Appointment {
  id         String            @id @default(cuid())
  patientId  String
  doctorId   String
  date       DateTime
  status     AppointmentStatus @default(PENDING)
  timeSlotId String            @unique // one appointment per timeslot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient  User                 @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor   User                 @relation("DoctorAppointments", fields: [doctorId], references: [id])
  timeSlot TimeSlot             @relation(fields: [timeSlotId], references: [id])
  history  AppointmentHistory[]
  queue    Queue[]

  @@index([doctorId, date]) // For finding a doctorâ€™s schedule
  @@index([patientId, date]) // For checking patient history
  @@index([status]) // For filtering appointments by status
  @@index([date]) // For calendar or availability views
  @@map("appointments")
}

model TimeSlot {
  id        String         @id @default(cuid())
  doctorId  String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    TimeSlotStatus

  // Relaions
  doctor      User         @relation("DoctorTimeSlot", fields: [doctorId], references: [id])
  appointment Appointment? // one-to-one back reference

  @@unique([doctorId, date, startTime])
  @@index([status]) // To filter OPEN/CLOSED slots
  @@map("time-slots")
}

model AppointmentHistory {
  id            String            @id @default(cuid())
  appointmentId String
  newStatus     AppointmentStatus
  changed_at    DateTime
  description   String?

  // Relation
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("appointment-histories")
}

model Notification {
  id      String @id @default(cuid())
  userId  String
  message String

  sentAt DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Role {
  id       String @id @default(cuid())
  roleName String @unique

  // Relation
  users User[]

  @@map("roles")
}

model Invoice {
  id        String @id @default(cuid())
  patientId String
  createdBy String

  amount Float
  status InvoiceStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient User @relation("InvoicePatient", fields: [patientId], references: [id])
  creator User @relation("InvoiceCreator", fields: [createdBy], references: [id])

  @@map("invoices")
}

model Queue {
  id            String @id @default(cuid())
  appointmentId String

  position Int
  status   InvoiceStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId]) // Efficient lookup by appointment
  @@index([status]) // Useful if filtering queues by status (e.g., PENDING)
  @@index([position]) // Useful if sorting or finding the next in queue
  @@map("queues")
}
